import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ThreadJoin {
	
	public static void main(String[] args) {
		
		List<Long> inputNumbers = Arrays.asList(0L, 234L, 24544L, 2048L, 23L, 1025L);
		
		List<FactorialThread> factorialThreads = new ArrayList<>();
		
		for(long inputNumber : inputNumbers)	{
			factorialThreads.add(new FactorialThread(inputNumber));
		}
		
		for(Thread thread: factorialThreads) {
			thread.start();
		}
		
		for(int i = 0; i < inputNumbers.size();i++)	{
			FactorialThread factorialThread = factorialThreads.get(i);
			if(factorialThread.isFinished()) {
				System.out.println("Factorial of " +  inputNumbers.get(i) + " is " + factorialThread.getResult());
			} else {
				System.out.println("The calculation for " + inputNumbers.get(i) + " is in progress");
			}
		}
	}
	
	private static class FactorialThread implements Runnable {
		private long inputNumber;
		private BigInteger result = BigInteger.ZERO;
		private boolean isFinished = false;
		
		public FactorialThread(long inputNumber) {
			this.inputNumber = inputNumber;
		}

		@Override
		public void run() {
			this.result = factorial(inputNumber);
			this.isFinished = true;
		}
		
		public BigInteger factorial(long n)	{
			BigInteger tempResult = BigInteger.ONE;
			
			for(long i = n; i > 0; i--) {
				tempResult = tempResult.multiply(new BigInteger(Long.toString(i)));
			}
			return tempResult;
		}
		
		public boolean isFinished() {
			return isFinished;
		}
		
		public BigInteger getResult() {
			return result;
		}
		
		
	}
	
}
