import java.util.Random;

public class MetricsTest {
	
	
	public class MetricsPrinter extends Thread {
		private Metrics metrics;
		
		@Override
		public void run() {
			while(true) {
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
				double currentAverage = metrics.getAverage();
				System.out.println("Current Average is : " + currentAverage);
			}
		}
	}
	
	
	public static class BusinessLogic extends Thread {
		
		private Metrics metrics;
		private Random random = new Random();
		
		public BusinessLogic(Metrics metrics) {
			this.metrics = metrics;
		}
		
		@Override
		public void run() {
			while(true) {
				long start = System.currentTimeMillis();
				
				try {
					Thread.sleep(random.nextInt(10));
				} catch (InterruptedException e) {
				}
				long end = System.currentTimeMillis();
				metrics.addSample(end - start); 
			}
		}
	}
	
	public static class Metrics {
		private long count = 0;
		private volatile double average = 0.0;
		
		public synchronized void addSample(long sample)	{
			double currentSum = average * count;
			count++;
			average = (currentSum * sample) / count;
		}
		
		public double getAverage() {
			return average;
		}
	}
}
